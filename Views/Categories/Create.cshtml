@model ShopMarket.Models.Category

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Category</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="CategoryName" class="form-control"></label>
                <input asp-for="CategoryName" class="form-control" />
                <span asp-validation-for="CategoryName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Choose category:</label>
                <select name="ParentCategoryId[]" class="form-select"  asp-items="ViewBag.ParentCategoryId" onchange="getChildCategories(event)">
                    <option value="0">None</option>
                </select>
            </div>
            <div class="form-group" id="sbmBtnGrp">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        async function getChildCategories(e) {
            let parentId = e.target.value;
            let resp = await fetch(`/categories/GetChildCategories?parentId=${parentId}`);
            if (resp.ok === true) {
                let text = await resp.text();
                console.log(text);
                let currentSelect = e.target.parentElement;
                let div = document.createElement("div");
                div.innerHTML = text;
                let nextElem = currentSelect.nextElementSibling;
                if (nextElem.id == "sbmBtnGrp")
                    currentSelect.after(div.firstChild);
                else
                    nextElem.replaceWith(div.firstChild);

            }
        }
    </script>
}
